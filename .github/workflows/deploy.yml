name: Deploy MT5 Data Source API to Windows Server

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  test-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install basic dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn python-dotenv pydantic pydantic-settings pandas numpy python-multipart requests cryptography paramiko pytest PyNaCl
    
    - name: Run basic tests
      run: |
        # 测试基本导入
        python -c "import fastapi; print('FastAPI imported successfully')"
        python -c "import uvicorn; print('Uvicorn imported successfully')"
        python -c "import pandas; print('Pandas imported successfully')"
        python -c "import numpy; print('NumPy imported successfully')"
        
        # 跳过MetaTrader5相关测试，因为它在Linux环境中不可用
        echo "Skipping MetaTrader5 tests on Linux environment"

  test-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install all dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run full tests
      run: |
        # 测试所有导入包括MetaTrader5
        python -c "import MetaTrader5; print('MetaTrader5 imported successfully')"
        python -c "import fastapi; print('FastAPI imported successfully')"
        python -c "import uvicorn; print('Uvicorn imported successfully')"
        
        # 运行完整的测试
        python -m pytest test_app.py -v

  deploy:
    needs: [test-linux, test-windows]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r app deployment/
        cp requirements.txt deployment/
        cp README.md deployment/
        cp .env.example deployment/
        
        # Create startup script
        cat > deployment/start.bat << 'EOF'
        @echo off
        echo Starting MT5 Data Source API...
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -m app.main
        EOF
        
        # Create service script
        cat > deployment/install_service.bat << 'EOF'
        @echo off
        echo Installing MT5 Data Source API as Windows Service...
        nssm install "MT5DataAPI" "C:\Python311\python.exe" "-m app.main"
        nssm set "MT5DataAPI" AppDirectory "%~dp0"
        nssm set "MT5DataAPI" Description "MT5 Data Source API Service"
        nssm set "MT5DataAPI" Start SERVICE_AUTO_START
        nssm start "MT5DataAPI"
        echo Service installed and started successfully!
        EOF
        
        # Create environment file
        cat > deployment/.env << 'EOF'
        API_KEY=${{ secrets.API_KEY }}
        MT5_LOGIN=${{ secrets.MT5_LOGIN }}
        MT5_PASSWORD=${{ secrets.MT5_PASSWORD }}
        MT5_SERVER=${{ secrets.MT5_SERVER }}
        MT5_TIMEOUT=${{ secrets.MT5_TIMEOUT }}
        EOF
    
    - name: Deploy to Windows Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # Create deployment directory
          mkdir -p C:\mt5-api
          cd C:\mt5-api
          
          # Stop existing service if running
          nssm stop "MT5DataAPI" 2>nul || echo "Service not running"
          nssm remove "MT5DataAPI" confirm 2>nul || echo "Service not installed"
          
          # Backup existing deployment
          if exist "app" (
            rmdir /s /q backup 2>nul
            mkdir backup
            xcopy /s /e app backup\app\
            copy requirements.txt backup\
            copy .env backup\ 2>nul
          )
          
          # Clean deployment directory
          rmdir /s /q app 2>nul
          del requirements.txt 2>nul
          del .env 2>nul
          del start.bat 2>nul
          del install_service.bat 2>nul
    
    - name: Upload deployment files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        source: "deployment/*"
        target: "C:/mt5-api"
        strip_components: 1
    
    - name: Install and start service
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          cd C:\mt5-api
          
          # Install Python dependencies
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Install NSSM if not available
          if not exist "C:\nssm\nssm.exe" (
            echo Installing NSSM...
            mkdir C:\nssm
            powershell -Command "Invoke-WebRequest -Uri 'https://nssm.cc/release/nssm-2.24.zip' -OutFile 'C:\nssm\nssm.zip'"
            powershell -Command "Expand-Archive -Path 'C:\nssm\nssm.zip' -DestinationPath 'C:\nssm' -Force"
            copy C:\nssm\nssm-2.24\win64\nssm.exe C:\nssm\
            rmdir /s /q C:\nssm\nssm-2.24
            del C:\nssm\nssm.zip
          )
          
          # Add NSSM to PATH
          setx PATH "%PATH%;C:\nssm" /M
          
          # Install and start service
          call install_service.bat
          
          # Wait for service to start
          timeout /t 10 /nobreak
          
          # Check service status
          nssm status "MT5DataAPI"
          
          # Test API endpoint
          curl -f http://localhost:3020/ || echo "API not responding yet"
    
    - name: Health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          echo "Waiting for API to be ready..."
          for /l %%i in (1,1,30) do (
            curl -f http://localhost:3020/ >nul 2>&1 && (
              echo "API is ready!"
              curl http://localhost:3020/
              exit /b 0
            ) || (
              echo "Attempt %%i: API not ready yet..."
              timeout /t 2 /nobreak >nul
            )
          )
          echo "API health check failed"
          exit /b 1
