name: Deploy MT5 Data Source API to Windows Server

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  test-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install basic dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn python-dotenv pydantic pydantic-settings pandas numpy python-multipart requests cryptography paramiko pytest PyNaCl
    
    - name: Run basic tests
      run: |
        # 测试基本导入
        python -c "import fastapi; print('FastAPI imported successfully')"
        python -c "import uvicorn; print('Uvicorn imported successfully')"
        python -c "import app.main; print('App main imported successfully')"
        python -c "import app.services.mt5_service; print('MT5Service imported successfully')"
        python -c "import app.services.technical_indicators; print('TechnicalIndicatorsService imported successfully')"

  test-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install all dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run full tests
      run: |
        # 测试完整功能
        python -c "import MetaTrader5; print('MetaTrader5 imported successfully')"
        python -c "import app.services.mt5_service; print('MT5Service imported successfully')"
        python -c "import app.services.technical_indicators; print('TechnicalIndicatorsService imported successfully')"

  deploy:
    needs: [test-linux, test-windows]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Windows Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          REM 创建部署目录
          mkdir -p C:\mt5-api
          cd C:\mt5-api
          
          REM 停止现有服务
          nssm stop "MT5DataAPI" 2>nul || echo "Service not running"
          nssm remove "MT5DataAPI" confirm 2>nul || echo "Service not installed"
          
          REM 备份现有部署
          if exist "app" (
            rmdir /s /q backup 2>nul
            mkdir backup
            xcopy /s /e app backup\app\
            copy requirements.txt backup\ 2>nul
            copy .env backup\ 2>nul
          )
          
          REM 清理部署目录
          rmdir /s /q app 2>nul
          del requirements.txt 2>nul
          del .env 2>nul
          del start.bat 2>nul
          del install_service.bat 2>nul
          
          REM 克隆最新代码
          git clone https://github.com/TheSixer/data-sources.git temp-repo
          xcopy /s /e temp-repo\app app\
          copy temp-repo\requirements.txt .
          copy temp-repo\env.example .env
          rmdir /s /q temp-repo
          
          REM 创建启动脚本
          echo @echo off > start.bat
          echo echo Starting MT5 Data Source API... >> start.bat
          echo python -m pip install --upgrade pip >> start.bat
          echo pip install -r requirements.txt >> start.bat
          echo python -m app.main >> start.bat
          
          REM 创建服务安装脚本
          echo @echo off > install_service.bat
          echo echo Installing MT5 Data Source API as Windows Service... >> install_service.bat
          echo nssm install "MT5DataAPI" "C:\Python311\python.exe" "-m app.main" >> install_service.bat
          echo nssm set "MT5DataAPI" AppDirectory "%~dp0" >> install_service.bat
          echo nssm set "MT5DataAPI" Description "MT5 Data Source API Service" >> install_service.bat
          echo nssm set "MT5DataAPI" Start SERVICE_AUTO_START >> install_service.bat
          echo nssm start "MT5DataAPI" >> install_service.bat
          echo echo Service installed and started successfully! >> install_service.bat
          
          REM 更新环境变量
          echo API_KEY=${{ secrets.API_KEY }} > .env
          echo MT5_LOGIN=${{ secrets.MT5_LOGIN }} >> .env
          echo MT5_PASSWORD=${{ secrets.MT5_PASSWORD }} >> .env
          echo MT5_SERVER=${{ secrets.MT5_SERVER }} >> .env
          echo MT5_TIMEOUT=${{ secrets.MT5_TIMEOUT }} >> .env
          
          REM 安装Python依赖
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          REM 安装NSSM（如果不存在）
          if not exist "C:\nssm\nssm.exe" (
            echo Installing NSSM...
            mkdir C:\nssm
            powershell -Command "Invoke-WebRequest -Uri 'https://nssm.cc/release/nssm-2.24.zip' -OutFile 'C:\nssm\nssm.zip'"
            powershell -Command "Expand-Archive -Path 'C:\nssm\nssm.zip' -DestinationPath 'C:\nssm' -Force"
            copy C:\nssm\nssm-2.24\win64\nssm.exe C:\nssm\
            rmdir /s /q C:\nssm\nssm-2.24
            del C:\nssm\nssm.zip
          )
          
          REM 添加NSSM到PATH
          setx PATH "%PATH%;C:\nssm" /M
          
          REM 安装并启动服务
          call install_service.bat
          
          REM 等待服务启动
          timeout /t 10 /nobreak
          
          REM 检查服务状态
          nssm status "MT5DataAPI"
          
          REM 测试API端点
          curl -f http://localhost:3020/ || echo "API not responding yet"
          
          REM 健康检查
          echo Waiting for API to be ready...
          for /l %%i in (1,1,30) do (
            curl -f http://localhost:3020/ >nul 2>&1 && (
              echo API is ready!
              curl http://localhost:3020/
              exit /b 0
            ) || (
              echo Attempt %%i: API not ready yet...
              timeout /t 2 /nobreak >nul
            )
          )
          echo API health check failed
          exit /b 1
